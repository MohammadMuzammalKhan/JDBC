// import com.mysql.cj.exceptions.StreamingNotifiable;
// import javax.crypto.spec.DESKeySpec;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
class App extends JFrame implements ActionListener , MouseListener
{
    // You need to makes changes here in order to connect your own database
    String url = "jdbc:mysql://localhost:3306/AMS";
    String user = "root";
    String pass = "root";
    JButton ADD, READ, UPDATE, DELETE;
    JLabel nameLabel, serialLabel, DOB_Label, departureAirportLabel, departureDateLabel, arivalAirpotLabel, arivalDateLabel;
    JTextField nameField, serialField, DOB_Field, departureDateField, arivalDateField;
    JTextArea  panel3Field;
    JPanel panel1, panel2, panel3;
    JFrame frame;
    JComboBox<String> departureAirport, arivalAirpot; 
    Font font = new Font("Times New Roman", Font.ITALIC, 20);
    App()
    {
        frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setBackground(new Color(196, 164, 132));
        frame.setLayout(new BorderLayout(10,10));
        frame.setTitle("Airport Management System");
        ImageIcon icon = new ImageIcon("AMS\\Images\\image.png");
        frame.setIconImage(icon.getImage());
        frame.setBounds(0,0,1000,1080);
        frame.setResizable(false);

        //---------------------panel1 ( Buttons ) --------------------------
        panel1 = new JPanel();
        panel1.setOpaque(false);
        panel1.setLayout(new GridLayout(4,1,10,10));  
        panel1.setPreferredSize(new Dimension(300,1000)); 
       
        ADD = new JButton("ADD");
        ADD.setFocusable(false);
        ADD.setFont(font);
        ADD.setBackground(new Color(221, 221, 221));
        ADD.setCursor(new Cursor(Cursor.HAND_CURSOR));
        ADD.addActionListener(this);

        READ = new JButton("READ");
        READ.setFocusable(false);
        READ.setFont(font);
        READ.setBackground(new Color(221, 221, 221));
        READ.setCursor(new Cursor(Cursor.HAND_CURSOR));
        READ.addActionListener(this);

        UPDATE = new JButton("UPDATE");
        UPDATE.setFocusable(false);
        UPDATE.setFont(font);
        UPDATE.setBackground(new Color(221, 221, 221));
        UPDATE.setCursor(new Cursor(Cursor.HAND_CURSOR));
        UPDATE.addActionListener(this);
        
        DELETE = new JButton("DELETE");
        DELETE.setFocusable(false);
        DELETE.setFont(font);
        DELETE.setBackground(new Color(221, 221, 221));
        DELETE.setCursor(new Cursor(Cursor.HAND_CURSOR));
        DELETE.addActionListener(this);

        panel1.add(ADD);     
        panel1.add(READ);     
        panel1.add(UPDATE);     
        panel1.add(DELETE);   

        //-------------------panel2 ( Center ) --------------------------
        panel2 = new JPanel();
        panel2.setLayout(null);
        panel2.setOpaque(false);
        panel2.setPreferredSize(new Dimension(700,620));
       
        nameLabel = new JLabel("Enter Name: ");
        nameLabel.setBounds(30,10,200,50);
        nameLabel.setFont(font);

        nameField = new JTextField("Enter name here");
        nameField.setBounds(250,10,250,50);
        nameField.setFont(font);
        nameField.addMouseListener(this);
        
        serialLabel = new JLabel("Enter Serial Number: ");
        serialLabel.setBounds(30,100,200,50);
        serialLabel.setFont(font);

        serialField = new JTextField("Serial Number");
        serialField.setBounds(250,100,250,50);
        serialField.setFont(font);
        serialField.addMouseListener(this);

        DOB_Label = new JLabel("Enter DOB : ");
        DOB_Label.setBounds(30,190,200,50);
        DOB_Label.setFont(font);

        DOB_Field = new JTextField("dd\\mm\\yy");
        DOB_Field.setBounds(250,190,250,50);
        DOB_Field.setFont(font);
        DOB_Field.addMouseListener(this);

        departureAirportLabel = new JLabel("Departure airport: ");
        departureAirportLabel.setBounds(30,280,200,50);
        departureAirportLabel.setFont(font);
        
        String[] departure_Airpots = {"Select airport ","Islamabad", "Karachi", "Lahore", "Peshawar"};
        departureAirport = new JComboBox<>(departure_Airpots);
        departureAirport.setBackground(Color.white);
        departureAirport.setFont(font);
        departureAirport.setBounds(250,280,250,50);
        departureAirport.setSelectedIndex(0);

        departureDateLabel = new JLabel("Departure Date: ");
        departureDateLabel.setBounds(30,370,200,50);
        departureDateLabel.setFont(font);

        departureDateField = new JTextField("dd\\mm\\yy");
        departureDateField.setBounds(250,370,250,50);
        departureDateField.setFont(font);
        departureDateField.addMouseListener(this);

        arivalAirpotLabel = new JLabel("Arival airport: ");
        arivalAirpotLabel.setBounds(30,460,200,50);
        arivalAirpotLabel.setFont(font);

        String[] arrival_Airpots = {"Select airport ","Islamabad", "Karachi", "Lahore", "Peshawar"};
        arivalAirpot = new JComboBox<>(arrival_Airpots);
        arivalAirpot.setBackground(Color.white);
        arivalAirpot.setFont(font);
        arivalAirpot.setBounds(250,460,250,50);
        arivalAirpot.setSelectedIndex(0);

        arivalDateLabel = new JLabel("Arival Date: ");
        arivalDateLabel.setBounds(30,550,200,50);
        arivalDateLabel.setFont(font);

        arivalDateField = new JTextField("dd\\mm\\yy");
        arivalDateField.setBounds(250,550,250,50);
        arivalDateField.setFont(font);
        arivalDateField.addMouseListener(this);

        panel2.add(nameLabel);
        panel2.add(nameField);

        panel2.add(serialLabel);
        panel2.add(serialField);

        panel2.add(DOB_Label);
        panel2.add(DOB_Field);

        panel2.add(departureAirportLabel);
        panel2.add(departureAirport);

        panel2.add(departureDateLabel);
        panel2.add(departureDateField);

        panel2.add(arivalAirpot);
        panel2.add(arivalAirpotLabel);

        panel2.add(arivalDateLabel);
        panel2.add(arivalDateField);

        //--------------------panel3 ( Bottom ) ----------------------------
        panel3 = new JPanel();  
        JLabel label = new JLabel(icon);
        panel3.setOpaque(false);
        panel3.setPreferredSize(new Dimension(700,380));
        panel3.setLayout(new FlowLayout(FlowLayout.TRAILING));

        panel3Field = new JTextArea("Hello! Welcome to our AMS");
        panel3Field.setPreferredSize(new Dimension(670,300));
        panel3Field.setFont(font);
        panel3Field.setLineWrap(true);
        panel3Field.setWrapStyleWord(true);
        panel3Field.setEditable(false);

        
        panel3.add(label);
        panel3.add(panel3Field);

        frame.add(panel1, BorderLayout.WEST);
        frame.add(panel2, BorderLayout.CENTER);
        frame.add(panel3, BorderLayout.SOUTH);
        frame.setVisible(true);
    } 
    //------------------------ADD-Button-----------------------------------------------------
    public void actionPerformed (ActionEvent e) {
       if ( e.getSource() == ADD )
       {
        try
        {
            String sqlQuery = " insert into Passenger (Passenger_SerialNumber,Passenger_Name, Passenger_DOB, Departure_Airport, Departure_Date, Arival_Airport, Arival_Date ) values ( ?, ?, ?, ?, ?, ?, ? ) " ;
            Connection conn = DriverManager.getConnection(url, user, pass);
            PreparedStatement preparedStatement = conn.prepareStatement(sqlQuery);

            preparedStatement.setInt(1, Integer.parseInt(serialField.getText()));
            preparedStatement.setString(2, nameField.getText());
            preparedStatement.setString(3, DOB_Field.getText());
            preparedStatement.setString(4, departureAirport.getSelectedItem().toString());
            preparedStatement.setString(5, departureDateField.getText());
            preparedStatement.setString(6, arivalAirpot.getSelectedItem().toString());
            preparedStatement.setString(7, arivalDateField.getText());

            int rowsInserted = preparedStatement.executeUpdate();
            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(null, "Data is inserted successfully!","Information", JOptionPane.INFORMATION_MESSAGE); 
            } else {
                JOptionPane.showMessageDialog(null, "Data is not inserted successfully!","Information", JOptionPane.INFORMATION_MESSAGE); 
            }
            preparedStatement.close();
            conn.close();

        } catch ( SQLException e1) { e1.printStackTrace();}
       }
    //------------------------READ-Button-----------------------------------------------------
       if ( e.getSource() == READ )
       { 
           try
           {

            String sqlQuery = " select * from Passenger where Passenger_SerialNumber = ? ";
            Connection conn = DriverManager.getConnection(url, user, pass);
            PreparedStatement preparedStatement = conn.prepareStatement(sqlQuery);

            String dummy = JOptionPane.showInputDialog("Enter Serial Number: ");
            int serialNumber = Integer.parseInt(dummy);
            preparedStatement.setInt(1, serialNumber);

            ResultSet resultSet = preparedStatement.executeQuery();
            if ( resultSet.next() )
            {
                panel3Field.setText("Passenger Information: \n" +
                   "Serial Number:" + resultSet.getInt("Passenger_SerialNumber") + "\n" + 
                   "Name: " + resultSet.getString("Passenger_Name") + "\n" + 
                   "Passenger_DOB: " + resultSet.getString("Passenger_DOB") + "\n" + 
                   "Departure Airport: " + resultSet.getString("Departure_Airport") + " \n" + 
                   "Departure_Date: " + resultSet.getString("Departure_Date")  + "\n" + 
                   "Arival_Airport: " + resultSet.getString("Arival_Airport") + "\n" + 
                   "Airval_Date: " + resultSet.getString("Arival_Date") );
            }
            else
            {
                JOptionPane.showMessageDialog(null, "No such user exits", "Passenger Details", JOptionPane.INFORMATION_MESSAGE);
            }

            resultSet.close();
            preparedStatement.close();
            conn.close();

           } catch ( SQLException e1 )
           {
            e1.printStackTrace();
           }
           catch ( NumberFormatException e2)
           {
            JOptionPane.showMessageDialog(null, "Invalid serial number ", "Error", JOptionPane.OK_CANCEL_OPTION);
           }
       }
       //-------------------------------UPDATE-Button-------------------------------------------------
         if ( e.getSource() == UPDATE )
        {
            try 
            {
                
                String sqlQuery = " update Passenger set  Passenger_Name = ?, Passenger_DOB = ?, Departure_Airport = ?, Departure_Date = ?, Arival_Airport = ? ,Arival_Date = ? where Passenger_SerialNumber = ? ";
                Connection conn = DriverManager.getConnection(url, user, pass);
                PreparedStatement preparedStatement = conn.prepareStatement(sqlQuery);
                
                preparedStatement.setString(1, nameField.getText());
                preparedStatement.setString(2, DOB_Field.getText());
                preparedStatement.setString(3, departureAirport.getSelectedItem().toString());
                preparedStatement.setString(4, departureDateField.getText());
                preparedStatement.setString(5,arivalAirpot.getSelectedItem().toString());
                preparedStatement.setString(6, arivalDateField.getText());
                preparedStatement.setInt(7, Integer.parseInt(serialField.getText()));

                int rowsUpdated = preparedStatement.executeUpdate();
                if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Data is inserted successfully!","Information", JOptionPane.INFORMATION_MESSAGE); 
                } else {
                JOptionPane.showMessageDialog(null, "Failed to insert Data successfully","Information", JOptionPane.INFORMATION_MESSAGE); 
                }

                preparedStatement.close();
                conn.close();

            }catch ( SQLException e1)
            {
                e1.printStackTrace();
            }
            catch (NumberFormatException e2)
            {
                JOptionPane.showMessageDialog(null, "Invalid Entry", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //-------------------------------DELETE-Button-----------------------------------
        if ( e.getSource() == DELETE )
        {
           try 
           {

            String sqlQuery = "delete from Passenger where Passenger_SerialNumber = ? ";
            Connection conn = DriverManager.getConnection(url, user, pass);
            PreparedStatement preparedStatement = conn.prepareStatement(sqlQuery);

            String dummy = JOptionPane.showInputDialog("Enter Serial Number: ");
            int serialNumber = Integer.parseInt(dummy);

            preparedStatement.setInt(1, serialNumber);
            int rowsDeleted = preparedStatement.executeUpdate(); // Use executeUpdate() for DELETE operation

            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(null, "Data deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "No records found for the provided serial number", "Info", JOptionPane.INFORMATION_MESSAGE);
            }

            preparedStatement.executeUpdate();
            preparedStatement.close();
            conn.close();        

           } catch (SQLException e1)
           {
            e1.printStackTrace();
           }
           catch (NumberFormatException e2)
           {
            JOptionPane.showMessageDialog(null, "Invalid Entry", "Error", JOptionPane.ERROR_MESSAGE);
           }
        }
    }
    //----------------------------------MouseListener----------------------------------
    public void mouseClicked(MouseEvent e) {
        if ( e.getSource() == nameField)
        {
            nameField.setText(""); //Empty Field
        }
        if ( e.getSource() == serialField)
        {
            serialField.setText("");
        }
        if ( e.getSource() == DOB_Field)
        {
            DOB_Field.setText("");
        }
        if ( e.getSource() == departureDateField)
        {
            departureDateField.setText("");
        }
        if ( e.getSource() == arivalDateField)
        {
            arivalDateField.setText("");
        }
    }
    public void mousePressed(MouseEvent e) {}
    public void mouseReleased(MouseEvent e) {
    //    JOptionPane.showMessageDialog(null, "Mouse Released", "Released", JOptionPane.INFORMATION_MESSAGE);
    }
    public void mouseEntered(MouseEvent e) 
    {
        if ( e.getSource() == nameField)
        {
            nameField.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        }
        if ( e.getSource() == serialField)
        {
            serialField.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        }
        if ( e.getSource() == DOB_Field)
        {
            DOB_Field.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        }
        if ( e.getSource() == departureDateField)
        {
            departureDateField.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        }
        if ( e.getSource() == arivalDateField)
        {
            arivalDateField.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        }
    }
    public void mouseExited(MouseEvent e) {}
}
